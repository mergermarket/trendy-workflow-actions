name: trendy-workflow-actions/build

on:
  workflow_call:
    inputs:
      runs-on:
        required: false
        default: "ubuntu-latest"
        type: string
      branch-filtering-before-deployment:
        required: false
        default: true
        type: boolean
      notify-teams-environment-name:
        required: false
        default: "environment"
        type: string
      notify-teams-on-failure:
        required: false
        default: true
        type: boolean
      branch-name-for-filtering-deployment:
        required: false
        default: "refs/heads/main"
        type: string
      copy-platform-config:
        required: false
        default: true
        type: boolean
      create-npmrc:
        required: false
        default: true
        type: boolean
      setup-node:
        required: false
        default: true
        type: boolean
      configure-aws-region:
        required: false
        default: "eu-west-1"
        type: string
      copy-platform-config-src-bucket-prefix:
        required: false
        default: "s3://acuris-platform-config"
        type: string
      copy-platform-config-dest-path-prefix:
        required: false
        default: "./platform-config"
        type: string
      copy-platform-config-download-list-json:
        required: false
        default: "[]"
        type: string
      setup-node-version:
        required: false
        default: 14
        type: number
      before-deploy-commands-json:
        required: false
        default: "[]"
        type: string
      deploy-commands-json:
        required: false
        default: "[]"
        type: string
      after-deploy-commands-json:
        required: false
        default: "[]"
        type: string
    secrets:
      MSTEAMS_WEBHOOK:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      NPM_ACCESS_TOKEN:
        required: true
      MONGODB_ATLAS_PUBLIC_KEY:
        required: false
      MONGODB_ATLAS_PRIVATE_KEY:
        required: false

jobs:
  Deploy:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      actions: read
      contents: read
    env:
      JOB_NAME: "deploy-${{ github.run_number }}-${{ github.sha }}"
      VERSION: ${{ github.run_number }}-${{ github.sha }}
      GITHUB_TOKEN: dummy-token
      NPM_ACCESS_TOKEN: '${{ secrets.NPM_ACCESS_TOKEN }}'
      MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY }}
      MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY }}
    if: ${{ !inputs.branch-filtering-before-deployment || github.ref == inputs.branch-name-for-filtering-deployment }}
    steps:
      - name: Print input paramters
        run: |
          echo 'inputs:'
          echo '${{toJSON(inputs)}}'
      - name: Install missing commands (self-hosted agents may need this)
        run: |
          echo "===== check: docker-compose ====="
          if ! command -v docker-compose &> /dev/null
          then
            echo "install: docker-compose"            
            curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/bin/docker-compose            
            chmod +x /usr/bin/docker-compose
          fi         
          echo "run: docker-compose -v"
          docker-compose -v
          echo "==========" 
          echo "===== check: jq ====="
          if ! command -v jq &> /dev/null
          then
            echo "install: jq"
            CMD_JQ=/usr/bin/jq
            curl https://stedolan.github.io/jq/download/linux64/jq > $CMD_JQ && chmod +x $CMD_JQ
            ls -la $CMD_JQ            
          fi
          echo "run: jq --version"
          jq --version
          echo "=========="
      - name: Checkout main branch
        uses: actions/checkout@v2
      - name: Notify Teams
        uses: patrickpaulin/ms-teams-deploy-card@master
        if: ${{ inputs.notify-teams-on-failure }}
        with:
          github-token: ${{ github.token }} # Use built-in more restricted token
          webhook-uri: ${{ secrets.MSTEAMS_WEBHOOK }}
          card-layout-exit: complete
          show-on-start: false
          show-on-failure: true
          custom-facts: |
            - name: Deployment Environment
              value: '${{ inputs.notify-teams-environment-name }}'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.configure-aws-region }}
      - name: Copy platform-config from s3
        if: ${{ inputs.copy-platform-config }}
        run: |
          COPY_PLATFORM_CONFIG_INPUT_JSON='${{inputs.copy-platform-config-download-list-json}}'
          COPY_PLATFORM_CONFIG_INPUT_SRC=""
          COPY_PLATFORM_CONFIG_INPUT_DEST=""
          ACCOUNT_ITEM_STR=""
          for accountItem in $(echo $COPY_PLATFORM_CONFIG_INPUT_JSON | jq -c .[]); 
          do 
            ACCOUNT_ITEM_STR=$(echo $accountItem | sed -e 's/^"//' -e 's/"$//')
            COPY_PLATFORM_CONFIG_INPUT_SRC="${{inputs.copy-platform-config-src-bucket-prefix}}/$ACCOUNT_ITEM_STR/";
            COPY_PLATFORM_CONFIG_INPUT_DEST="${{inputs.copy-platform-config-dest-path-prefix}}/$ACCOUNT_ITEM_STR";
            echo "run: aws s3 sync $COPY_PLATFORM_CONFIG_INPUT_SRC $COPY_PLATFORM_CONFIG_INPUT_DEST";
            aws s3 sync $COPY_PLATFORM_CONFIG_INPUT_SRC $COPY_PLATFORM_CONFIG_INPUT_DEST;
          done
      - name: Create .npmrc
        if: ${{ inputs.create-npmrc }}
        run: |
          echo "@mergermarket:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_ACCESS_TOKEN }}" >> .npmrc
          echo "registry=https://registry.npmjs.org" >> .npmrc
      - name: Setup Node.js
        uses: actions/setup-node@v2
        if: ${{ inputs.setup-node }}
        with:
          node-version: ${{ inputs.setup-node-version }}
          cache: npm      
      - name: Run before-deployment commands
        env:
          GITHUB_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          set -e
          BEFORE_DEPLOY_COMMANDS_JSON='${{ inputs.before-deploy-commands-json }}'
          COMMAND_STR=""
          if echo $BEFORE_DEPLOY_COMMANDS_JSON | jq . ; then
            echo $BEFORE_DEPLOY_COMMANDS_JSON | jq -c .[] | while read command; do 
              COMMAND_STR=$(echo $command | sed -e 's/^"//' -e 's/"$//')  
              echo "*********************************************";
              echo "*              running command              *";
              echo "*********************************************";
              echo "$COMMAND_STR";
              echo "*********************************************";
              eval $COMMAND_STR  
              echo "*********************************************";
              echo "exit code: $?";
              echo "*********************************************";  
            done
          else
            echo "before-deploy-commands-json is not valid!"
          fi
      - name: Run deployment commands
        env:
          GITHUB_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          set -e
          DEPLOY_COMMANDS_JSON='${{ inputs.deploy-commands-json }}'
          COMMAND_STR=""
          if echo $DEPLOY_COMMANDS_JSON | jq . ; then
            echo $DEPLOY_COMMANDS_JSON | jq -c .[] | while read command; do 
              COMMAND_STR=$(echo $command | sed -e 's/^"//' -e 's/"$//')  
              echo "*********************************************";
              echo "*              running command              *";
              echo "*********************************************";
              echo "$COMMAND_STR";
              echo "*********************************************";
              eval $COMMAND_STR  
              echo "*********************************************";
              echo "exit code: $?";
              echo "*********************************************";  
            done
          else
            echo "deploy-commands-json is not valid!"
          fi
      - name: Run after-deployment commands
        env:
          GITHUB_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          set -e
          AFTER_DEPLOY_COMMANDS_JSON='${{ inputs.after-deploy-commands-json }}'
          COMMAND_STR=""
          if echo $AFTER_DEPLOY_COMMANDS_JSON | jq . ; then
            echo $AFTER_DEPLOY_COMMANDS_JSON | jq -c .[] | while read command; do 
              COMMAND_STR=$(echo $command | sed -e 's/^"//' -e 's/"$//')  
              echo "*********************************************";
              echo "*              running command              *";
              echo "*********************************************";
              echo "$COMMAND_STR";
              echo "*********************************************";
              eval $COMMAND_STR  
              echo "*********************************************";
              echo "exit code: $?";
              echo "*********************************************";  
            done
          else
            echo "after-deploy-commands-json is not valid!"
          fi
